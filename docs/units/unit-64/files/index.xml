<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Files on Python I</title>
    <link>https://lapinel-6.course-manager.app/units/unit-64/files/</link>
    <description>Recent content in Files on Python I</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://lapinel-6.course-manager.app/units/unit-64/files/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://lapinel-6.course-manager.app/units/unit-64/files/plan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://lapinel-6.course-manager.app/units/unit-64/files/plan/</guid>
      <description>&lt;h1 id=&#34;unit-4-functions-and-exceptions&#34;&gt;Unit 4: Functions and Exceptions&lt;/h1&gt;&#xA;&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Duration&lt;/strong&gt;: ~10 lessons (2 weeks)&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Focus&lt;/strong&gt;: Writing reusable functions and handling errors with exceptions.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Goal&lt;/strong&gt;: By the end of this unit, you will be able to write testable functions, pass information with parameters, and handle errors gracefully.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;lessons&#34;&gt;Lessons&lt;/h2&gt;&#xA;&lt;h3 id=&#34;lesson-41--intro-to-functions&#34;&gt;Lesson 4.1 – Intro to Functions&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;What functions are and why we use them&lt;/li&gt;&#xA;&lt;li&gt;Defining functions with &lt;code&gt;def&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Writing and calling simple functions&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;lesson-42--function-parameters&#34;&gt;Lesson 4.2 – Function Parameters&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Positional, keyword, and default parameters&lt;/li&gt;&#xA;&lt;li&gt;Variable-length parameters: &lt;code&gt;*args&lt;/code&gt; and &lt;code&gt;**kwargs&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Writing functions that avoid side effects&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;lesson-43--return-values-vs-side-effects&#34;&gt;Lesson 4.3 – Return Values vs. Side Effects&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Returning values from functions&lt;/li&gt;&#xA;&lt;li&gt;Returning multiple values&lt;/li&gt;&#xA;&lt;li&gt;Why returning is better than printing (testability)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;lesson-44--scope-and-lifetime&#34;&gt;Lesson 4.4 – Scope and Lifetime&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Local vs. global variables&lt;/li&gt;&#xA;&lt;li&gt;Why globals are risky&lt;/li&gt;&#xA;&lt;li&gt;How variable scope affects functions&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;lesson-45--errors-and-exceptions&#34;&gt;Lesson 4.5 – Errors and Exceptions&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Common runtime errors (&lt;code&gt;ZeroDivisionError&lt;/code&gt;, &lt;code&gt;ValueError&lt;/code&gt;, &lt;code&gt;IndexError&lt;/code&gt;)&lt;/li&gt;&#xA;&lt;li&gt;Why programs crash without handling errors&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;lesson-46--handling-exceptions&#34;&gt;Lesson 4.6 – Handling Exceptions&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;try&lt;/code&gt;/&lt;code&gt;except&lt;/code&gt; blocks&lt;/li&gt;&#xA;&lt;li&gt;Catching specific vs. general exceptions&lt;/li&gt;&#xA;&lt;li&gt;Preventing program crashes&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;lesson-47--raising-exceptions&#34;&gt;Lesson 4.7 – Raising Exceptions&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Using &lt;code&gt;raise&lt;/code&gt; to trigger errors&lt;/li&gt;&#xA;&lt;li&gt;Validating inputs&lt;/li&gt;&#xA;&lt;li&gt;Making your code more predictable&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;lesson-48--functions--exceptions-together&#34;&gt;Lesson 4.8 – Functions + Exceptions Together&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Combining functions with error handling&lt;/li&gt;&#xA;&lt;li&gt;Example: safe division, safe file opening&lt;/li&gt;&#xA;&lt;li&gt;Writing robust programs&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;lesson-49--review--rehearse&#34;&gt;Lesson 4.9 – Review &amp;amp; Rehearse&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Quiz&lt;/li&gt;&#xA;&lt;li&gt;Debugging activity: “Name That Error”&lt;/li&gt;&#xA;&lt;li&gt;Review games&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;lesson-410--perform-exam&#34;&gt;Lesson 4.10 – Perform (Exam)&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Exam: Functions and Exceptions&lt;/li&gt;&#xA;&lt;li&gt;Show what you can do independently&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;by-the-end-of-unit-4-you-will-be-able-to&#34;&gt;By the end of Unit 4, you will be able to:&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Define and call your own functions&lt;/li&gt;&#xA;&lt;li&gt;Use different types of parameters&lt;/li&gt;&#xA;&lt;li&gt;Write functions without side effects&lt;/li&gt;&#xA;&lt;li&gt;Handle exceptions with &lt;code&gt;try&lt;/code&gt;, &lt;code&gt;except&lt;/code&gt;, and &lt;code&gt;raise&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Build programs that are robust and testable&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
