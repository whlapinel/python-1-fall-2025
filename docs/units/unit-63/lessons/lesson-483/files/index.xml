<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Files on Python I</title>
    <link>https://lapinel-6.course-manager.app/units/unit-63/lessons/lesson-483/files/</link>
    <description>Recent content in Files on Python I</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://lapinel-6.course-manager.app/units/unit-63/lessons/lesson-483/files/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Assignment 3.7</title>
      <link>https://lapinel-6.course-manager.app/units/unit-63/lessons/lesson-483/files/assignment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://lapinel-6.course-manager.app/units/unit-63/lessons/lesson-483/files/assignment/</guid>
      <description>&lt;h1 id=&#34;assignment-37--list-comprehensions-drills&#34;&gt;Assignment 3.7 — List Comprehensions Drills&lt;/h1&gt;&#xA;&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;&#xA;&lt;p&gt;Practice mapping and filtering with Python list comprehensions. Complete the tasks&#xA;below in a single script named &lt;code&gt;assignment_3_7.py&lt;/code&gt;. Unless specified otherwise,&#xA;solve using list comprehensions (no explicit &lt;code&gt;for&lt;/code&gt; loops for the core result).&lt;/p&gt;&#xA;&lt;h2 id=&#34;tasks&#34;&gt;Tasks&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Squares 1..20&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Build a list of squares for numbers 1 through 20 (inclusive).&lt;/li&gt;&#xA;&lt;li&gt;Variable name: &lt;code&gt;squares_1_20&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Example: first five are &lt;code&gt;[1, 4, 9, 16, 25]&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;Keep Evens, Double Them&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Given &lt;code&gt;nums = [3, 8, 11, 14, 2, 7]&lt;/code&gt;, produce &lt;code&gt;[16, 28, 4]&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Filter even numbers, then map by doubling.&lt;/li&gt;&#xA;&lt;li&gt;Variable name: &lt;code&gt;doubled_evens&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ol start=&#34;3&#34;&gt;&#xA;&lt;li&gt;Clean Names&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Given &lt;code&gt;names = [&#39;  ALIce&#39;, &#39;bob  &#39;, &#39;   &#39;, &#39;Eve&#39;]&lt;/code&gt;, build &lt;code&gt;[&#39;Alice&#39;, &#39;Bob&#39;, &#39;Eve&#39;]&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Strip whitespace and title-case, skip blanks.&lt;/li&gt;&#xA;&lt;li&gt;One comprehension. Variable: &lt;code&gt;clean_names&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ol start=&#34;4&#34;&gt;&#xA;&lt;li&gt;Flatten One Level&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Given &lt;code&gt;matrix = [[1, 2], [3, 4, 5], [6]]&lt;/code&gt;, build &lt;code&gt;[1, 2, 3, 4, 5, 6]&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Use a nested comprehension. Variable: &lt;code&gt;flat&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ol start=&#34;5&#34;&gt;&#xA;&lt;li&gt;Words ≥ 5 Letters (Lowercased)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Given &lt;code&gt;text = &#39;Time flies like an arrow; fruit flies like a banana.&#39;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Split on whitespace, strip leading/trailing punctuation &lt;code&gt;,.;:!?&lt;/code&gt; from each token,&#xA;keep words with length ≥ 5, and lowercase them.&lt;/li&gt;&#xA;&lt;li&gt;Example output (order matters): &lt;code&gt;[&#39;flies&#39;, &#39;arrow&#39;, &#39;fruit&#39;, &#39;flies&#39;, &#39;banana&#39;]&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Variable: &lt;code&gt;long_words&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
