<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Files on Python I</title>
    <link>https://lapinel-6.course-manager.app/units/unit-67/lessons/lesson-521/files/</link>
    <description>Recent content in Files on Python I</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://lapinel-6.course-manager.app/units/unit-67/lessons/lesson-521/files/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Assignment 7.7</title>
      <link>https://lapinel-6.course-manager.app/units/unit-67/lessons/lesson-521/files/assignment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://lapinel-6.course-manager.app/units/unit-67/lessons/lesson-521/files/assignment/</guid>
      <description>&lt;h1 id=&#34;assignment-77-project-progress-checkpoint--functions--error-handling-prepare&#34;&gt;Assignment 7.7: Project Progress Checkpoint – Functions &amp;amp; Error Handling (Prepare)&lt;/h1&gt;&#xA;&lt;h2 id=&#34;goal&#34;&gt;Goal&lt;/h2&gt;&#xA;&lt;p&gt;Demonstrate progress on your Creative Project by adding functions and input safety.&lt;/p&gt;&#xA;&lt;h2 id=&#34;instructions&#34;&gt;Instructions&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Open your current project code.&lt;/li&gt;&#xA;&lt;li&gt;Add &lt;strong&gt;at least two functions&lt;/strong&gt; that each handle a clear task (e.g., &lt;code&gt;show_menu()&lt;/code&gt;, &lt;code&gt;play_round()&lt;/code&gt;, &lt;code&gt;make_choice()&lt;/code&gt;).&lt;/li&gt;&#xA;&lt;li&gt;Add &lt;strong&gt;input validation&lt;/strong&gt; using one or more of:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;.lower()&lt;/code&gt; / &lt;code&gt;.strip()&lt;/code&gt; to normalize input&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;if/elif/else&lt;/code&gt; to check allowed options&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;try/except&lt;/code&gt; to catch &lt;code&gt;ValueError&lt;/code&gt; when converting types&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Your program should:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Prompt the user for input&lt;/li&gt;&#xA;&lt;li&gt;Handle unexpected input without crashing&lt;/li&gt;&#xA;&lt;li&gt;Continue (or reprompt) until valid input is entered&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Comment your code to explain each new function’s purpose.&lt;/li&gt;&#xA;&lt;li&gt;Submit your updated &lt;code&gt;.py&lt;/code&gt; file to Canvas.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;example-snippet&#34;&gt;Example Snippet&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ask_int&lt;/span&gt;(prompt):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; int(input(prompt))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ValueError&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Please enter a whole number.&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;level &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ask_int(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Choose difficulty (1-3): &amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Starting level:&amp;#34;&lt;/span&gt;, level)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;checklist&#34;&gt;Checklist&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Two new functions created and used&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Input is validated and program does not crash&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Clear comments for new functions&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; App runs end-to-end for a simple path&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;rubric&#34;&gt;Rubric&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Two functional, well-named functions added (40%)&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Robust input handling (&lt;code&gt;try/except&lt;/code&gt;, validation, reprompt) (40%)&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Code clarity (comments, readable flow) (10%)&lt;/li&gt;&#xA;&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Runs without errors (10%)&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
